input:

output:
Lexer error at: 5.

________________________________________________________________________________
input:

output:


________________________________________________________________________________
input:
abc, bca

output:
Ident('abc', 0, 0, 3); Delim(',', 0, 3, 4); Ident('bca', 0, 5, 8); 

________________________________________________________________________________
input:
abc_cba

output:
Ident('abc_cba', 0, 0, 7); 

________________________________________________________________________________
input:
!
output:
Lexer error at: 0.

________________________________________________________________________________
input:
123abc
output:
Lexer error at: 0.

________________________________________________________________________________
input:
if then else while do skip write read
+ - * / == != && || < <= >= > ;
123 4312
blah

output:
Keyword('if', 0, 0, 2); Keyword('then', 0, 3, 7); Keyword('else', 0, 8, 12); Keyword('while', 0, 13, 18); Keyword('do', 0, 19, 21); Ident('skip', 0, 22, 26); Keyword('write', 0, 27, 32); Keyword('read', 0, 33, 37); Op('+', 1, 38, 39); Op('-', 1, 40, 41); Op('*', 1, 42, 43); Op('/', 1, 44, 45); Op('==', 1, 46, 48); Op('!=', 1, 49, 51); Op('&&', 1, 52, 54); Op('||', 1, 55, 57); Op('<', 1, 58, 59); Op('<=', 1, 60, 62); Op('>=', 1, 63, 65); Op('>', 1, 66, 67); Delim(';', 1, 68, 69); Number(123.0, 2, 70, 73); Number(4312.0, 2, 74, 78); Ident('blah', 3, 79, 83); 

________________________________________________________________________________
input:
if then else
while do 
begin	end
read   write
true false
+ - * / % == != > >= < <= && ||
( )
 ; 
1
1.0
-975.31e+2468
// this is a comment

output:
Keyword('if', 0, 0, 2); Keyword('then', 0, 3, 7); Keyword('else', 0, 8, 12); Keyword('while', 1, 13, 18); Keyword('do', 1, 19, 21); Ident('begin', 2, 23, 28); Ident('end', 2, 29, 32); Keyword('read', 3, 33, 37); Keyword('write', 3, 40, 45); Bool('true', 4, 46, 50); Bool('false', 4, 51, 56); Op('+', 5, 57, 58); Op('-', 5, 59, 60); Op('*', 5, 61, 62); Op('/', 5, 63, 64); Op('%', 5, 65, 66); Op('==', 5, 67, 69); Op('!=', 5, 70, 72); Op('>', 5, 73, 74); Op('>=', 5, 75, 77); Op('<', 5, 78, 79); Op('<=', 5, 80, 82); Op('&&', 5, 83, 85); Op('||', 5, 86, 88); Delim('(', 6, 89, 90); Delim(')', 6, 91, 92); Delim(';', 7, 94, 95); Number(1.0, 8, 97, 98); Number(1.0, 9, 99, 102); Op('-', 10, 103, 104); Number(inf, 10, 104, 116); Op('/', 11, 117, 118); Op('/', 11, 118, 119); Ident('this', 11, 120, 124); Ident('is', 11, 125, 127); Ident('a', 11, 128, 129); Ident('comment', 11, 130, 137); 

________________________________________________________________________________
input:
42 ^ 24 - 156 * 123

output:
Lexer error at: 3.

________________________________________________________________________________
input:
(42 ^ (24 - 156) * 123)

output:
Lexer error at: 4.

________________________________________________________________________________
input:
1

output:
Number(1.0, 0, 0, 1); 

________________________________________________________________________________
input:
1+2

output:
Number(1.0, 0, 0, 1); Op('+', 0, 1, 2); Number(2.0, 0, 2, 3); 

________________________________________________________________________________
input:
3*4

output:
Number(3.0, 0, 0, 1); Op('*', 0, 1, 2); Number(4.0, 0, 2, 3); 

________________________________________________________________________________
input:
1+2*3+4*5

output:
Number(1.0, 0, 0, 1); Op('+', 0, 1, 2); Number(2.0, 0, 2, 3); Op('*', 0, 3, 4); Number(3.0, 0, 4, 5); Op('+', 0, 5, 6); Number(4.0, 0, 6, 7); Op('*', 0, 7, 8); Number(5.0, 0, 8, 9); 

________________________________________________________________________________
input:
q

output:
Ident('q', 0, 0, 1); 

________________________________________________________________________________
input:
1+

output:
Number(1.0, 0, 0, 1); Op('+', 0, 1, 2); 

________________________________________________________________________________
input:
12

output:
Number(12.0, 0, 0, 2); 

________________________________________________________________________________
input:
+1

output:
Op('+', 0, 0, 1); Number(1.0, 0, 1, 2); 

________________________________________________________________________________
input:
()

output:
Delim('(', 0, 0, 1); Delim(')', 0, 1, 2); 

________________________________________________________________________________
input:
()()

output:
Delim('(', 0, 0, 1); Delim(')', 0, 1, 2); Delim('(', 0, 2, 3); Delim(')', 0, 3, 4); 

________________________________________________________________________________
input:
(())

output:
Delim('(', 0, 0, 1); Delim('(', 0, 1, 2); Delim(')', 0, 2, 3); Delim(')', 0, 3, 4); 

________________________________________________________________________________
input:
()((())())

output:
Delim('(', 0, 0, 1); Delim(')', 0, 1, 2); Delim('(', 0, 2, 3); Delim('(', 0, 3, 4); Delim('(', 0, 4, 5); Delim(')', 0, 5, 6); Delim(')', 0, 6, 7); Delim('(', 0, 7, 8); Delim(')', 0, 8, 9); Delim(')', 0, 9, 10); 

________________________________________________________________________________
input:
(

output:
Delim('(', 0, 0, 1); 

________________________________________________________________________________
input:
!

output:
Lexer error at: 0.

________________________________________________________________________________
input:
())

output:
Delim('(', 0, 0, 1); Delim(')', 0, 1, 2); Delim(')', 0, 2, 3); 

________________________________________________________________________________
input:
(())())(()

output:
Delim('(', 0, 0, 1); Delim('(', 0, 1, 2); Delim(')', 0, 2, 3); Delim(')', 0, 3, 4); Delim('(', 0, 4, 5); Delim(')', 0, 5, 6); Delim(')', 0, 6, 7); Delim('(', 0, 7, 8); Delim('(', 0, 8, 9); Delim(')', 0, 9, 10); 

________________________________________________________________________________
input:
// comment 


output:
Op('/', 0, 0, 1); Op('/', 0, 1, 2); Ident('comment', 0, 3, 10); 

________________________________________________________________________________
input:
somewhere
// comment
in the middle

output:
Ident('somewhere', 0, 0, 9); Op('/', 1, 10, 11); Op('/', 1, 11, 12); Ident('comment', 1, 13, 20); Ident('in', 2, 21, 23); Ident('the', 2, 24, 27); Ident('middle', 2, 28, 34); 

________________________________________________________________________________
input:
x := q // i * t 

output:
Lexer error at: 2.

________________________________________________________________________________
input:
if x == 0 then 
	skip 
else begin
	x := 1;
	write x
end

output:
Lexer error at: 37.

________________________________________________________________________________
input:
1+

output:
Number(1.0, 0, 0, 1); Op('+', 0, 1, 2); 

________________________________________________________________________________
input:
+1

output:
Op('+', 0, 0, 1); Number(1.0, 0, 1, 2); 

________________________________________________________________________________
input:
-1

output:
Op('-', 0, 0, 1); Number(1.0, 0, 1, 2); 

________________________________________________________________________________
input:
a

output:
Ident('a', 0, 0, 1); 

________________________________________________________________________________
input:
1^^2

output:
Lexer error at: 1.

________________________________________________________________________________
input:
1 21 + 4

output:
Number(1.0, 0, 0, 1); Number(21.0, 0, 2, 4); Op('+', 0, 5, 6); Number(4.0, 0, 7, 8); 

________________________________________________________________________________
input:
(* *)
output:
Delim('(', 0, 0, 1); Op('*', 0, 1, 2); Op('*', 0, 3, 4); Delim(')', 0, 4, 5); 

________________________________________________________________________________
input:
(* ** **)
output:
Delim('(', 0, 0, 1); Op('*', 0, 1, 2); Op('*', 0, 3, 4); Op('*', 0, 4, 5); Op('*', 0, 6, 7); Op('*', 0, 7, 8); Delim(')', 0, 8, 9); 

________________________________________________________________________________
input:
(** ** *)
output:
Delim('(', 0, 0, 1); Op('*', 0, 1, 2); Op('*', 0, 2, 3); Op('*', 0, 4, 5); Op('*', 0, 5, 6); Op('*', 0, 7, 8); Delim(')', 0, 8, 9); 

________________________________________________________________________________
input:
(*it 
is so
big it 

touches
sky
*)

output:
Delim('(', 0, 0, 1); Op('*', 0, 1, 2); Ident('it', 0, 2, 4); Ident('is', 1, 6, 8); Ident('so', 1, 9, 11); Ident('big', 2, 12, 15); Ident('it', 2, 16, 18); Ident('touches', 4, 21, 28); Ident('sky', 5, 29, 32); Op('*', 6, 33, 34); Delim(')', 6, 34, 35); 

________________________________________________________________________________
input:
(*it 
is
so big

it touches
sky *)

output:
Delim('(', 0, 0, 1); Op('*', 0, 1, 2); Ident('it', 0, 2, 4); Ident('is', 1, 6, 8); Ident('so', 2, 9, 11); Ident('big', 2, 12, 15); Ident('it', 4, 17, 19); Ident('touches', 4, 20, 27); Ident('sky', 5, 28, 31); Op('*', 5, 32, 33); Delim(')', 5, 33, 34); 

________________________________________________________________________________
input:
(* 
really
multi line

comment 
with a lot 
of 

spaces 

*)

output:
Delim('(', 0, 0, 1); Op('*', 0, 1, 2); Ident('really', 1, 4, 10); Ident('multi', 2, 11, 16); Ident('line', 2, 17, 21); Ident('comment', 4, 23, 30); Ident('with', 5, 32, 36); Ident('a', 5, 37, 38); Ident('lot', 5, 39, 42); Ident('of', 6, 44, 46); Ident('spaces', 8, 49, 55); Op('*', 10, 58, 59); Delim(')', 10, 59, 60); 

________________________________________________________________________________
input:
(* *) (*(*(**) *) (* *)*) 

output:
Delim('(', 0, 0, 1); Op('*', 0, 1, 2); Op('*', 0, 3, 4); Delim(')', 0, 4, 5); Delim('(', 0, 6, 7); Op('*', 0, 7, 8); Delim('(', 0, 8, 9); Op('*', 0, 9, 10); Delim('(', 0, 10, 11); Op('*', 0, 11, 12); Op('*', 0, 12, 13); Delim(')', 0, 13, 14); Op('*', 0, 15, 16); Delim(')', 0, 16, 17); Delim('(', 0, 18, 19); Op('*', 0, 19, 20); Op('*', 0, 21, 22); Delim(')', 0, 22, 23); Op('*', 0, 23, 24); Delim(')', 0, 24, 25); 

________________________________________________________________________________
input:
/* */

output:
Op('/', 0, 0, 1); Op('*', 0, 1, 2); Op('*', 0, 3, 4); Op('/', 0, 4, 5); 

________________________________________________________________________________
input:
/* ** **/

output:
Op('/', 0, 0, 1); Op('*', 0, 1, 2); Op('*', 0, 3, 4); Op('*', 0, 4, 5); Op('*', 0, 6, 7); Op('*', 0, 7, 8); Op('/', 0, 8, 9); 

________________________________________________________________________________
input:
/** ** */

output:
Op('/', 0, 0, 1); Op('*', 0, 1, 2); Op('*', 0, 2, 3); Op('*', 0, 4, 5); Op('*', 0, 5, 6); Op('*', 0, 7, 8); Op('/', 0, 8, 9); 

________________________________________________________________________________
input:
/*it 
is
so big

it touches
sky */

output:
Op('/', 0, 0, 1); Op('*', 0, 1, 2); Ident('it', 0, 2, 4); Ident('is', 1, 6, 8); Ident('so', 2, 9, 11); Ident('big', 2, 12, 15); Ident('it', 4, 17, 19); Ident('touches', 4, 20, 27); Ident('sky', 5, 28, 31); Op('*', 5, 32, 33); Op('/', 5, 33, 34); 

________________________________________________________________________________
input:
/* 
really
multi line

comment 
with a lot 
of 

spaces 

*/

output:
Op('/', 0, 0, 1); Op('*', 0, 1, 2); Ident('really', 1, 4, 10); Ident('multi', 2, 11, 16); Ident('line', 2, 17, 21); Ident('comment', 4, 23, 30); Ident('with', 5, 32, 36); Ident('a', 5, 37, 38); Ident('lot', 5, 39, 42); Ident('of', 6, 44, 46); Ident('spaces', 8, 49, 55); Op('*', 10, 58, 59); Op('/', 10, 59, 60); 

________________________________________________________________________________
input:
/* */ /*/*/**/ */ /* */*/

output:
Op('/', 0, 0, 1); Op('*', 0, 1, 2); Op('*', 0, 3, 4); Op('/', 0, 4, 5); Op('/', 0, 6, 7); Op('*', 0, 7, 8); Op('/', 0, 8, 9); Op('*', 0, 9, 10); Op('/', 0, 10, 11); Op('*', 0, 11, 12); Op('*', 0, 12, 13); Op('/', 0, 13, 14); Op('*', 0, 15, 16); Op('/', 0, 16, 17); Op('/', 0, 18, 19); Op('*', 0, 19, 20); Op('*', 0, 21, 22); Op('/', 0, 22, 23); Op('*', 0, 23, 24); Op('/', 0, 24, 25); 

________________________________________________________________________________
input:
if (x == 0) then 
	skip 
else begin
	x := 1;
	write (x)
end

output:
Lexer error at: 39.

________________________________________________________________________________
input:
x := 0 && 8

output:
Lexer error at: 2.

________________________________________________________________________________
input:
read (x); if (y + 1 == x) then write (y) else (*nothing to do here*) skip

output:
Keyword('read', 0, 0, 4); Delim('(', 0, 5, 6); Ident('x', 0, 6, 7); Delim(')', 0, 7, 8); Delim(';', 0, 8, 9); Keyword('if', 0, 10, 12); Delim('(', 0, 13, 14); Ident('y', 0, 14, 15); Op('+', 0, 16, 17); Number(1.0, 0, 18, 19); Op('==', 0, 20, 22); Ident('x', 0, 23, 24); Delim(')', 0, 24, 25); Keyword('then', 0, 26, 30); Keyword('write', 0, 31, 36); Delim('(', 0, 37, 38); Ident('y', 0, 38, 39); Delim(')', 0, 39, 40); Keyword('else', 0, 41, 45); Delim('(', 0, 46, 47); Op('*', 0, 47, 48); Ident('nothing', 0, 48, 55); Ident('to', 0, 56, 58); Keyword('do', 0, 59, 61); Ident('here', 0, 62, 66); Op('*', 0, 66, 67); Delim(')', 0, 67, 68); Ident('skip', 0, 69, 73); 

________________________________________________________________________________
input:
read (n);
if (n <= 0)
then skip
else 
  begin 
    res := 1;
    i := 1;
    while (i <= n) do
      res := res * i;
      i := i + 1
  end

output:
Lexer error at: 55.

________________________________________________________________________________
input:
x := (0 && 8)

output:
Lexer error at: 2.

________________________________________________________________________________
input:
read (x); if ((y + 1) == x) then write(y) else (*nothing to do here*) skip

output:
Keyword('read', 0, 0, 4); Delim('(', 0, 5, 6); Ident('x', 0, 6, 7); Delim(')', 0, 7, 8); Delim(';', 0, 8, 9); Keyword('if', 0, 10, 12); Delim('(', 0, 13, 14); Delim('(', 0, 14, 15); Ident('y', 0, 15, 16); Op('+', 0, 17, 18); Number(1.0, 0, 19, 20); Delim(')', 0, 20, 21); Op('==', 0, 22, 24); Ident('x', 0, 25, 26); Delim(')', 0, 26, 27); Keyword('then', 0, 28, 32); Keyword('write', 0, 33, 38); Delim('(', 0, 38, 39); Ident('y', 0, 39, 40); Delim(')', 0, 40, 41); Keyword('else', 0, 42, 46); Delim('(', 0, 47, 48); Op('*', 0, 48, 49); Ident('nothing', 0, 49, 56); Ident('to', 0, 57, 59); Keyword('do', 0, 60, 62); Ident('here', 0, 63, 67); Op('*', 0, 67, 68); Delim(')', 0, 68, 69); Ident('skip', 0, 70, 74); 

________________________________________________________________________________
input:
f (x,t) = g (y, z);

output:
Lexer error at: 8.

________________________________________________________________________________
input:
read (x); 
while (0) do skip;
if (y == z) then x := y + z else write (x);
skip; 
skip


output:
Lexer error at: 49.

________________________________________________________________________________
input:
read (x); if (y + 1 == x) then write( y) else skip

output:
Keyword('read', 0, 0, 4); Delim('(', 0, 5, 6); Ident('x', 0, 6, 7); Delim(')', 0, 7, 8); Delim(';', 0, 8, 9); Keyword('if', 0, 10, 12); Delim('(', 0, 13, 14); Ident('y', 0, 14, 15); Op('+', 0, 16, 17); Number(1.0, 0, 18, 19); Op('==', 0, 20, 22); Ident('x', 0, 23, 24); Delim(')', 0, 24, 25); Keyword('then', 0, 26, 30); Keyword('write', 0, 31, 36); Delim('(', 0, 36, 37); Ident('y', 0, 38, 39); Delim(')', 0, 39, 40); Keyword('else', 0, 41, 45); Ident('skip', 0, 46, 50); 

________________________________________________________________________________
input:
read (x)

output:
Keyword('read', 0, 0, 4); Delim('(', 0, 5, 6); Ident('x', 0, 6, 7); Delim(')', 0, 7, 8); 

________________________________________________________________________________
input:
write (1+x)

output:
Keyword('write', 0, 0, 5); Delim('(', 0, 6, 7); Number(1.0, 0, 7, 8); Op('+', 0, 8, 9); Ident('x', 0, 9, 10); Delim(')', 0, 10, 11); 

________________________________________________________________________________
input:
if x == 1 then skip else skip

output:
Keyword('if', 0, 0, 2); Ident('x', 0, 3, 4); Op('==', 0, 5, 7); Number(1.0, 0, 8, 9); Keyword('then', 0, 10, 14); Ident('skip', 0, 15, 19); Keyword('else', 0, 20, 24); Ident('skip', 0, 25, 29); 

________________________________________________________________________________
input:
write y

output:
Keyword('write', 0, 0, 5); Ident('y', 0, 6, 7); 

________________________________________________________________________________
input:
skip ;
skip;
skip skip

output:
Ident('skip', 0, 0, 4); Delim(';', 0, 5, 6); Ident('skip', 1, 7, 11); Delim(';', 1, 11, 12); Ident('skip', 2, 13, 17); Ident('skip', 2, 18, 22); 

________________________________________________________________________________
input:
0+13*42-7/0

output:
Number(0.0, 0, 0, 1); Op('+', 0, 1, 2); Number(13.0, 0, 2, 4); Op('*', 0, 4, 5); Number(42.0, 0, 5, 7); Op('-', 0, 7, 8); Number(7.0, 0, 8, 9); Op('/', 0, 9, 10); Number(0.0, 0, 10, 11); 

________________________________________________________________________________
input:
(0+13)*((42-7)/0)

output:
Delim('(', 0, 0, 1); Number(0.0, 0, 1, 2); Op('+', 0, 2, 3); Number(13.0, 0, 3, 5); Delim(')', 0, 5, 6); Op('*', 0, 6, 7); Delim('(', 0, 7, 8); Delim('(', 0, 8, 9); Number(42.0, 0, 9, 11); Op('-', 0, 11, 12); Number(7.0, 0, 12, 13); Delim(')', 0, 13, 14); Op('/', 0, 14, 15); Number(0.0, 0, 15, 16); Delim(')', 0, 16, 17); 

________________________________________________________________________________
input:
1-2-3-(5-6)

output:
Number(1.0, 0, 0, 1); Op('-', 0, 1, 2); Number(2.0, 0, 2, 3); Op('-', 0, 3, 4); Number(3.0, 0, 4, 5); Op('-', 0, 5, 6); Delim('(', 0, 6, 7); Number(5.0, 0, 7, 8); Op('-', 0, 8, 9); Number(6.0, 0, 9, 10); Delim(')', 0, 10, 11); 

________________________________________________________________________________
input:
13

output:
Number(13.0, 0, 0, 2); 

________________________________________________________________________________
input:
(((((13)))))

output:
Delim('(', 0, 0, 1); Delim('(', 0, 1, 2); Delim('(', 0, 2, 3); Delim('(', 0, 3, 4); Delim('(', 0, 4, 5); Number(13.0, 0, 5, 7); Delim(')', 0, 7, 8); Delim(')', 0, 8, 9); Delim(')', 0, 9, 10); Delim(')', 0, 10, 11); Delim(')', 0, 11, 12); 

________________________________________________________________________________
input:
42^24-156*123

output:
Lexer error at: 2.

________________________________________________________________________________
input:
(42^(24-156)*123)

output:
Lexer error at: 3.

________________________________________________________________________________
input:
1 ** 2 * 3 
output:
Number(1.0, 0, 0, 1); Op('*', 0, 2, 3); Op('*', 0, 3, 4); Number(2.0, 0, 5, 6); Op('*', 0, 7, 8); Number(3.0, 0, 9, 10); 

________________________________________________________________________________
input:
* ** *** **** *****
output:
Op('*', 0, 0, 1); Op('*', 0, 2, 3); Op('*', 0, 3, 4); Op('*', 0, 5, 6); Op('*', 0, 6, 7); Op('*', 0, 7, 8); Op('*', 0, 9, 10); Op('*', 0, 10, 11); Op('*', 0, 11, 12); Op('*', 0, 12, 13); Op('*', 0, 14, 15); Op('*', 0, 15, 16); Op('*', 0, 16, 17); Op('*', 0, 17, 18); Op('*', 0, 18, 19); 

________________________________________________________________________________
